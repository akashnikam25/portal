// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package search

import (
	json "encoding/json"
	easyjson "github.com/zerodha/easyjson"
	jlexer "github.com/zerodha/easyjson/jlexer"
	jwriter "github.com/zerodha/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjsonD2b7633eDecodeGithubComFlossFundPortalInternalSearch(in *jlexer.Lexer, out *ProjectsResp) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "grouped_hits":
			if in.IsNull() {
				in.Skip()
				out.GroupedHits = nil
			} else {
				in.Delim('[')
				if out.GroupedHits == nil {
					if !in.IsDelim(']') {
						out.GroupedHits = make([]struct {
							Hits []struct {
								Project Project `json:"document"`
							} `json:"hits"`
						}, 0, 2)
					} else {
						out.GroupedHits = []struct {
							Hits []struct {
								Project Project `json:"document"`
							} `json:"hits"`
						}{}
					}
				} else {
					out.GroupedHits = (out.GroupedHits)[:0]
				}
				for !in.IsDelim(']') {
					var v1 struct {
						Hits []struct {
							Project Project `json:"document"`
						} `json:"hits"`
					}
					easyjsonD2b7633eDecode(in, &v1)
					out.GroupedHits = append(out.GroupedHits, v1)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncodeGithubComFlossFundPortalInternalSearch(out *jwriter.Writer, in ProjectsResp) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"grouped_hits\":"
		out.RawString(prefix[1:])
		if in.GroupedHits == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v2, v3 := range in.GroupedHits {
				if v2 > 0 {
					out.RawByte(',')
				}
				easyjsonD2b7633eEncode(out, v3)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ProjectsResp) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{FloatFmt: ""}
	easyjsonD2b7633eEncodeGithubComFlossFundPortalInternalSearch(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ProjectsResp) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncodeGithubComFlossFundPortalInternalSearch(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ProjectsResp) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecodeGithubComFlossFundPortalInternalSearch(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ProjectsResp) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecodeGithubComFlossFundPortalInternalSearch(l, v)
}
func easyjsonD2b7633eDecode(in *jlexer.Lexer, out *struct {
	Hits []struct {
		Project Project `json:"document"`
	} `json:"hits"`
}) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "hits":
			if in.IsNull() {
				in.Skip()
				out.Hits = nil
			} else {
				in.Delim('[')
				if out.Hits == nil {
					if !in.IsDelim(']') {
						out.Hits = make([]struct {
							Project Project `json:"document"`
						}, 0, 0)
					} else {
						out.Hits = []struct {
							Project Project `json:"document"`
						}{}
					}
				} else {
					out.Hits = (out.Hits)[:0]
				}
				for !in.IsDelim(']') {
					var v4 struct {
						Project Project `json:"document"`
					}
					easyjsonD2b7633eDecode1(in, &v4)
					out.Hits = append(out.Hits, v4)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncode(out *jwriter.Writer, in struct {
	Hits []struct {
		Project Project `json:"document"`
	} `json:"hits"`
}) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"hits\":"
		out.RawString(prefix[1:])
		if in.Hits == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v5, v6 := range in.Hits {
				if v5 > 0 {
					out.RawByte(',')
				}
				easyjsonD2b7633eEncode1(out, v6)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}
func easyjsonD2b7633eDecode1(in *jlexer.Lexer, out *struct {
	Project Project `json:"document"`
}) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "document":
			(out.Project).UnmarshalEasyJSON(in)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncode1(out *jwriter.Writer, in struct {
	Project Project `json:"document"`
}) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"document\":"
		out.RawString(prefix[1:])
		(in.Project).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}
func easyjsonD2b7633eDecodeGithubComFlossFundPortalInternalSearch1(in *jlexer.Lexer, out *Projects) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		in.Skip()
		*out = nil
	} else {
		in.Delim('[')
		if *out == nil {
			if !in.IsDelim(']') {
				*out = make(Projects, 0, 0)
			} else {
				*out = Projects{}
			}
		} else {
			*out = (*out)[:0]
		}
		for !in.IsDelim(']') {
			var v7 Project
			(v7).UnmarshalEasyJSON(in)
			*out = append(*out, v7)
			in.WantComma()
		}
		in.Delim(']')
	}
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncodeGithubComFlossFundPortalInternalSearch1(out *jwriter.Writer, in Projects) {
	if in == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
		out.RawString("null")
	} else {
		out.RawByte('[')
		for v8, v9 := range in {
			if v8 > 0 {
				out.RawByte(',')
			}
			(v9).MarshalEasyJSON(out)
		}
		out.RawByte(']')
	}
}

// MarshalJSON supports json.Marshaler interface
func (v Projects) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{FloatFmt: ""}
	easyjsonD2b7633eEncodeGithubComFlossFundPortalInternalSearch1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Projects) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncodeGithubComFlossFundPortalInternalSearch1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Projects) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecodeGithubComFlossFundPortalInternalSearch1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Projects) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecodeGithubComFlossFundPortalInternalSearch1(l, v)
}
func easyjsonD2b7633eDecodeGithubComFlossFundPortalInternalSearch2(in *jlexer.Lexer, out *ProjectQuery) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "q":
			out.Query = string(in.String())
		case "manifest_id":
			out.ManifestID = int(in.Int())
		case "id":
			out.ID = string(in.String())
		case "name":
			out.Name = string(in.String())
		case "description":
			out.Description = string(in.String())
		case "licenses":
			if in.IsNull() {
				in.Skip()
				out.Licenses = nil
			} else {
				in.Delim('[')
				if out.Licenses == nil {
					if !in.IsDelim(']') {
						out.Licenses = make([]string, 0, 4)
					} else {
						out.Licenses = []string{}
					}
				} else {
					out.Licenses = (out.Licenses)[:0]
				}
				for !in.IsDelim(']') {
					var v10 string
					v10 = string(in.String())
					out.Licenses = append(out.Licenses, v10)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "tags":
			if in.IsNull() {
				in.Skip()
				out.Tags = nil
			} else {
				in.Delim('[')
				if out.Tags == nil {
					if !in.IsDelim(']') {
						out.Tags = make([]string, 0, 4)
					} else {
						out.Tags = []string{}
					}
				} else {
					out.Tags = (out.Tags)[:0]
				}
				for !in.IsDelim(']') {
					var v11 string
					v11 = string(in.String())
					out.Tags = append(out.Tags, v11)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncodeGithubComFlossFundPortalInternalSearch2(out *jwriter.Writer, in ProjectQuery) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"q\":"
		out.RawString(prefix[1:])
		out.String(string(in.Query))
	}
	if in.ManifestID != 0 {
		const prefix string = ",\"manifest_id\":"
		out.RawString(prefix)
		out.Int(int(in.ManifestID))
	}
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix)
		out.String(string(in.ID))
	}
	{
		const prefix string = ",\"name\":"
		out.RawString(prefix)
		out.String(string(in.Name))
	}
	{
		const prefix string = ",\"description\":"
		out.RawString(prefix)
		out.String(string(in.Description))
	}
	{
		const prefix string = ",\"licenses\":"
		out.RawString(prefix)
		if in.Licenses == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v12, v13 := range in.Licenses {
				if v12 > 0 {
					out.RawByte(',')
				}
				out.String(string(v13))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"tags\":"
		out.RawString(prefix)
		if in.Tags == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v14, v15 := range in.Tags {
				if v14 > 0 {
					out.RawByte(',')
				}
				out.String(string(v15))
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ProjectQuery) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{FloatFmt: ""}
	easyjsonD2b7633eEncodeGithubComFlossFundPortalInternalSearch2(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ProjectQuery) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncodeGithubComFlossFundPortalInternalSearch2(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ProjectQuery) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecodeGithubComFlossFundPortalInternalSearch2(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ProjectQuery) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecodeGithubComFlossFundPortalInternalSearch2(l, v)
}
func easyjsonD2b7633eDecodeGithubComFlossFundPortalInternalSearch3(in *jlexer.Lexer, out *Project) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "manifest_id":
			out.ManifestID = int(in.Int())
		case "id":
			out.ID = string(in.String())
		case "name":
			out.Name = string(in.String())
		case "description":
			out.Description = string(in.String())
		case "licenses":
			if in.IsNull() {
				in.Skip()
				out.Licenses = nil
			} else {
				in.Delim('[')
				if out.Licenses == nil {
					if !in.IsDelim(']') {
						out.Licenses = make([]string, 0, 4)
					} else {
						out.Licenses = []string{}
					}
				} else {
					out.Licenses = (out.Licenses)[:0]
				}
				for !in.IsDelim(']') {
					var v16 string
					v16 = string(in.String())
					out.Licenses = append(out.Licenses, v16)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "tags":
			if in.IsNull() {
				in.Skip()
				out.Tags = nil
			} else {
				in.Delim('[')
				if out.Tags == nil {
					if !in.IsDelim(']') {
						out.Tags = make([]string, 0, 4)
					} else {
						out.Tags = []string{}
					}
				} else {
					out.Tags = (out.Tags)[:0]
				}
				for !in.IsDelim(']') {
					var v17 string
					v17 = string(in.String())
					out.Tags = append(out.Tags, v17)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncodeGithubComFlossFundPortalInternalSearch3(out *jwriter.Writer, in Project) {
	out.RawByte('{')
	first := true
	_ = first
	if in.ManifestID != 0 {
		const prefix string = ",\"manifest_id\":"
		first = false
		out.RawString(prefix[1:])
		out.Int(int(in.ManifestID))
	}
	{
		const prefix string = ",\"id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.ID))
	}
	{
		const prefix string = ",\"name\":"
		out.RawString(prefix)
		out.String(string(in.Name))
	}
	{
		const prefix string = ",\"description\":"
		out.RawString(prefix)
		out.String(string(in.Description))
	}
	{
		const prefix string = ",\"licenses\":"
		out.RawString(prefix)
		if in.Licenses == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v18, v19 := range in.Licenses {
				if v18 > 0 {
					out.RawByte(',')
				}
				out.String(string(v19))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"tags\":"
		out.RawString(prefix)
		if in.Tags == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v20, v21 := range in.Tags {
				if v20 > 0 {
					out.RawByte(',')
				}
				out.String(string(v21))
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Project) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{FloatFmt: ""}
	easyjsonD2b7633eEncodeGithubComFlossFundPortalInternalSearch3(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Project) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncodeGithubComFlossFundPortalInternalSearch3(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Project) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecodeGithubComFlossFundPortalInternalSearch3(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Project) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecodeGithubComFlossFundPortalInternalSearch3(l, v)
}
func easyjsonD2b7633eDecodeGithubComFlossFundPortalInternalSearch4(in *jlexer.Lexer, out *EntityQuery) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "q":
			out.Query = string(in.String())
		case "manifest_id":
			out.ManifestID = int(in.Int())
		case "id":
			out.ID = string(in.String())
		case "name":
			out.Name = string(in.String())
		case "type":
			out.Type = string(in.String())
		case "role":
			out.Role = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncodeGithubComFlossFundPortalInternalSearch4(out *jwriter.Writer, in EntityQuery) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"q\":"
		out.RawString(prefix[1:])
		out.String(string(in.Query))
	}
	if in.ManifestID != 0 {
		const prefix string = ",\"manifest_id\":"
		out.RawString(prefix)
		out.Int(int(in.ManifestID))
	}
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix)
		out.String(string(in.ID))
	}
	{
		const prefix string = ",\"name\":"
		out.RawString(prefix)
		out.String(string(in.Name))
	}
	{
		const prefix string = ",\"type\":"
		out.RawString(prefix)
		out.String(string(in.Type))
	}
	{
		const prefix string = ",\"role\":"
		out.RawString(prefix)
		out.String(string(in.Role))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v EntityQuery) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{FloatFmt: ""}
	easyjsonD2b7633eEncodeGithubComFlossFundPortalInternalSearch4(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v EntityQuery) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncodeGithubComFlossFundPortalInternalSearch4(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *EntityQuery) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecodeGithubComFlossFundPortalInternalSearch4(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *EntityQuery) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecodeGithubComFlossFundPortalInternalSearch4(l, v)
}
func easyjsonD2b7633eDecodeGithubComFlossFundPortalInternalSearch5(in *jlexer.Lexer, out *Entity) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "manifest_id":
			out.ManifestID = int(in.Int())
		case "id":
			out.ID = string(in.String())
		case "name":
			out.Name = string(in.String())
		case "type":
			out.Type = string(in.String())
		case "role":
			out.Role = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncodeGithubComFlossFundPortalInternalSearch5(out *jwriter.Writer, in Entity) {
	out.RawByte('{')
	first := true
	_ = first
	if in.ManifestID != 0 {
		const prefix string = ",\"manifest_id\":"
		first = false
		out.RawString(prefix[1:])
		out.Int(int(in.ManifestID))
	}
	{
		const prefix string = ",\"id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.ID))
	}
	{
		const prefix string = ",\"name\":"
		out.RawString(prefix)
		out.String(string(in.Name))
	}
	{
		const prefix string = ",\"type\":"
		out.RawString(prefix)
		out.String(string(in.Type))
	}
	{
		const prefix string = ",\"role\":"
		out.RawString(prefix)
		out.String(string(in.Role))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Entity) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{FloatFmt: ""}
	easyjsonD2b7633eEncodeGithubComFlossFundPortalInternalSearch5(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Entity) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncodeGithubComFlossFundPortalInternalSearch5(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Entity) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecodeGithubComFlossFundPortalInternalSearch5(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Entity) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecodeGithubComFlossFundPortalInternalSearch5(l, v)
}
func easyjsonD2b7633eDecodeGithubComFlossFundPortalInternalSearch6(in *jlexer.Lexer, out *EntitiesResp) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "grouped_hits":
			if in.IsNull() {
				in.Skip()
				out.GroupedHits = nil
			} else {
				in.Delim('[')
				if out.GroupedHits == nil {
					if !in.IsDelim(']') {
						out.GroupedHits = make([]struct {
							Hits []struct {
								Entity Entity `json:"document"`
							} `json:"hits"`
						}, 0, 2)
					} else {
						out.GroupedHits = []struct {
							Hits []struct {
								Entity Entity `json:"document"`
							} `json:"hits"`
						}{}
					}
				} else {
					out.GroupedHits = (out.GroupedHits)[:0]
				}
				for !in.IsDelim(']') {
					var v22 struct {
						Hits []struct {
							Entity Entity `json:"document"`
						} `json:"hits"`
					}
					easyjsonD2b7633eDecode2(in, &v22)
					out.GroupedHits = append(out.GroupedHits, v22)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncodeGithubComFlossFundPortalInternalSearch6(out *jwriter.Writer, in EntitiesResp) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"grouped_hits\":"
		out.RawString(prefix[1:])
		if in.GroupedHits == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v23, v24 := range in.GroupedHits {
				if v23 > 0 {
					out.RawByte(',')
				}
				easyjsonD2b7633eEncode2(out, v24)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v EntitiesResp) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{FloatFmt: ""}
	easyjsonD2b7633eEncodeGithubComFlossFundPortalInternalSearch6(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v EntitiesResp) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncodeGithubComFlossFundPortalInternalSearch6(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *EntitiesResp) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecodeGithubComFlossFundPortalInternalSearch6(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *EntitiesResp) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecodeGithubComFlossFundPortalInternalSearch6(l, v)
}
func easyjsonD2b7633eDecode2(in *jlexer.Lexer, out *struct {
	Hits []struct {
		Entity Entity `json:"document"`
	} `json:"hits"`
}) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "hits":
			if in.IsNull() {
				in.Skip()
				out.Hits = nil
			} else {
				in.Delim('[')
				if out.Hits == nil {
					if !in.IsDelim(']') {
						out.Hits = make([]struct {
							Entity Entity `json:"document"`
						}, 0, 0)
					} else {
						out.Hits = []struct {
							Entity Entity `json:"document"`
						}{}
					}
				} else {
					out.Hits = (out.Hits)[:0]
				}
				for !in.IsDelim(']') {
					var v25 struct {
						Entity Entity `json:"document"`
					}
					easyjsonD2b7633eDecode3(in, &v25)
					out.Hits = append(out.Hits, v25)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncode2(out *jwriter.Writer, in struct {
	Hits []struct {
		Entity Entity `json:"document"`
	} `json:"hits"`
}) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"hits\":"
		out.RawString(prefix[1:])
		if in.Hits == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v26, v27 := range in.Hits {
				if v26 > 0 {
					out.RawByte(',')
				}
				easyjsonD2b7633eEncode3(out, v27)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}
func easyjsonD2b7633eDecode3(in *jlexer.Lexer, out *struct {
	Entity Entity `json:"document"`
}) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "document":
			(out.Entity).UnmarshalEasyJSON(in)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncode3(out *jwriter.Writer, in struct {
	Entity Entity `json:"document"`
}) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"document\":"
		out.RawString(prefix[1:])
		(in.Entity).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}
func easyjsonD2b7633eDecodeGithubComFlossFundPortalInternalSearch7(in *jlexer.Lexer, out *Entities) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		in.Skip()
		*out = nil
	} else {
		in.Delim('[')
		if *out == nil {
			if !in.IsDelim(']') {
				*out = make(Entities, 0, 0)
			} else {
				*out = Entities{}
			}
		} else {
			*out = (*out)[:0]
		}
		for !in.IsDelim(']') {
			var v28 Entity
			(v28).UnmarshalEasyJSON(in)
			*out = append(*out, v28)
			in.WantComma()
		}
		in.Delim(']')
	}
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncodeGithubComFlossFundPortalInternalSearch7(out *jwriter.Writer, in Entities) {
	if in == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
		out.RawString("null")
	} else {
		out.RawByte('[')
		for v29, v30 := range in {
			if v29 > 0 {
				out.RawByte(',')
			}
			(v30).MarshalEasyJSON(out)
		}
		out.RawByte(']')
	}
}

// MarshalJSON supports json.Marshaler interface
func (v Entities) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{FloatFmt: ""}
	easyjsonD2b7633eEncodeGithubComFlossFundPortalInternalSearch7(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Entities) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncodeGithubComFlossFundPortalInternalSearch7(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Entities) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecodeGithubComFlossFundPortalInternalSearch7(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Entities) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecodeGithubComFlossFundPortalInternalSearch7(l, v)
}
